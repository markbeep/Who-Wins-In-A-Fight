// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBattles(t *testing.T) {
	t.Parallel()

	query := Battles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBattlesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Battle{}
	if err = randomize.Struct(seed, o, battleDBTypes, true, battleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Battles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBattlesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Battle{}
	if err = randomize.Struct(seed, o, battleDBTypes, true, battleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Battles().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Battles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBattlesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Battle{}
	if err = randomize.Struct(seed, o, battleDBTypes, true, battleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BattleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Battles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBattlesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Battle{}
	if err = randomize.Struct(seed, o, battleDBTypes, true, battleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BattleExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Battle exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BattleExists to return true, but got false.")
	}
}

func testBattlesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Battle{}
	if err = randomize.Struct(seed, o, battleDBTypes, true, battleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	battleFound, err := FindBattle(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if battleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBattlesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Battle{}
	if err = randomize.Struct(seed, o, battleDBTypes, true, battleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Battles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBattlesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Battle{}
	if err = randomize.Struct(seed, o, battleDBTypes, true, battleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Battles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBattlesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	battleOne := &Battle{}
	battleTwo := &Battle{}
	if err = randomize.Struct(seed, battleOne, battleDBTypes, false, battleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}
	if err = randomize.Struct(seed, battleTwo, battleDBTypes, false, battleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = battleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = battleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Battles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBattlesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	battleOne := &Battle{}
	battleTwo := &Battle{}
	if err = randomize.Struct(seed, battleOne, battleDBTypes, false, battleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}
	if err = randomize.Struct(seed, battleTwo, battleDBTypes, false, battleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = battleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = battleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Battles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func battleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Battle) error {
	*o = Battle{}
	return nil
}

func battleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Battle) error {
	*o = Battle{}
	return nil
}

func battleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Battle) error {
	*o = Battle{}
	return nil
}

func battleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Battle) error {
	*o = Battle{}
	return nil
}

func battleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Battle) error {
	*o = Battle{}
	return nil
}

func battleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Battle) error {
	*o = Battle{}
	return nil
}

func battleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Battle) error {
	*o = Battle{}
	return nil
}

func battleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Battle) error {
	*o = Battle{}
	return nil
}

func battleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Battle) error {
	*o = Battle{}
	return nil
}

func testBattlesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Battle{}
	o := &Battle{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, battleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Battle object: %s", err)
	}

	AddBattleHook(boil.BeforeInsertHook, battleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	battleBeforeInsertHooks = []BattleHook{}

	AddBattleHook(boil.AfterInsertHook, battleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	battleAfterInsertHooks = []BattleHook{}

	AddBattleHook(boil.AfterSelectHook, battleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	battleAfterSelectHooks = []BattleHook{}

	AddBattleHook(boil.BeforeUpdateHook, battleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	battleBeforeUpdateHooks = []BattleHook{}

	AddBattleHook(boil.AfterUpdateHook, battleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	battleAfterUpdateHooks = []BattleHook{}

	AddBattleHook(boil.BeforeDeleteHook, battleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	battleBeforeDeleteHooks = []BattleHook{}

	AddBattleHook(boil.AfterDeleteHook, battleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	battleAfterDeleteHooks = []BattleHook{}

	AddBattleHook(boil.BeforeUpsertHook, battleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	battleBeforeUpsertHooks = []BattleHook{}

	AddBattleHook(boil.AfterUpsertHook, battleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	battleAfterUpsertHooks = []BattleHook{}
}

func testBattlesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Battle{}
	if err = randomize.Struct(seed, o, battleDBTypes, true, battleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Battles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBattlesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Battle{}
	if err = randomize.Struct(seed, o, battleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(battleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Battles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBattleToOneCardUsingCard1(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Battle
	var foreign Card

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, battleDBTypes, false, battleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, cardDBTypes, false, cardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Card struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.Card1ID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Card1().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddCardHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Card) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := BattleSlice{&local}
	if err = local.L.LoadCard1(ctx, tx, false, (*[]*Battle)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Card1 == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Card1 = nil
	if err = local.L.LoadCard1(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Card1 == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testBattleToOneCardUsingCard2(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Battle
	var foreign Card

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, battleDBTypes, false, battleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, cardDBTypes, false, cardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Card struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.Card2ID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Card2().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddCardHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Card) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := BattleSlice{&local}
	if err = local.L.LoadCard2(ctx, tx, false, (*[]*Battle)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Card2 == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Card2 = nil
	if err = local.L.LoadCard2(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Card2 == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testBattleToOneSetOpCardUsingCard1(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Battle
	var b, c Card

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, battleDBTypes, false, strmangle.SetComplement(battlePrimaryKeyColumns, battleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, cardDBTypes, false, strmangle.SetComplement(cardPrimaryKeyColumns, cardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cardDBTypes, false, strmangle.SetComplement(cardPrimaryKeyColumns, cardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Card{&b, &c} {
		err = a.SetCard1(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Card1 != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Card1Battles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Card1ID != x.ID {
			t.Error("foreign key was wrong value", a.Card1ID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Card1ID))
		reflect.Indirect(reflect.ValueOf(&a.Card1ID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Card1ID != x.ID {
			t.Error("foreign key was wrong value", a.Card1ID, x.ID)
		}
	}
}
func testBattleToOneSetOpCardUsingCard2(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Battle
	var b, c Card

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, battleDBTypes, false, strmangle.SetComplement(battlePrimaryKeyColumns, battleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, cardDBTypes, false, strmangle.SetComplement(cardPrimaryKeyColumns, cardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cardDBTypes, false, strmangle.SetComplement(cardPrimaryKeyColumns, cardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Card{&b, &c} {
		err = a.SetCard2(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Card2 != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Card2Battles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Card2ID != x.ID {
			t.Error("foreign key was wrong value", a.Card2ID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Card2ID))
		reflect.Indirect(reflect.ValueOf(&a.Card2ID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Card2ID != x.ID {
			t.Error("foreign key was wrong value", a.Card2ID, x.ID)
		}
	}
}

func testBattlesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Battle{}
	if err = randomize.Struct(seed, o, battleDBTypes, true, battleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBattlesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Battle{}
	if err = randomize.Struct(seed, o, battleDBTypes, true, battleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BattleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBattlesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Battle{}
	if err = randomize.Struct(seed, o, battleDBTypes, true, battleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Battles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	battleDBTypes = map[string]string{`ID`: `integer`, `Card1ID`: `integer`, `Card2ID`: `integer`, `Card1Wins`: `integer`, `Card2Wins`: `integer`}
	_             = bytes.MinRead
)

func testBattlesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(battlePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(battleAllColumns) == len(battlePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Battle{}
	if err = randomize.Struct(seed, o, battleDBTypes, true, battleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Battles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, battleDBTypes, true, battlePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBattlesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(battleAllColumns) == len(battlePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Battle{}
	if err = randomize.Struct(seed, o, battleDBTypes, true, battleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Battles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, battleDBTypes, true, battlePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(battleAllColumns, battlePrimaryKeyColumns) {
		fields = battleAllColumns
	} else {
		fields = strmangle.SetComplement(
			battleAllColumns,
			battlePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BattleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBattlesUpsert(t *testing.T) {
	t.Parallel()

	if len(battleAllColumns) == len(battlePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Battle{}
	if err = randomize.Struct(seed, &o, battleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Battle: %s", err)
	}

	count, err := Battles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, battleDBTypes, false, battlePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Battle struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Battle: %s", err)
	}

	count, err = Battles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
